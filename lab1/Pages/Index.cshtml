@page
@model lab1.Pages.converter.RgbModel
@{
    ViewData["Title"] = "RGB";
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>RGB Color Picker</title>
  <style>

    #color-picker-rgb{
      width: 400px;
      margin: 50px auto;
      text-align: center;
    }
    #color-picker-cmyk{
      width: 400px;
      margin: 50px auto;
      text-align: center;
    }
    #color-picker-hsl{
      width: 400px;
      margin: 50px auto;
      text-align: center;
    }
    
    #color-preview-rgb {
      width: 150px;
      height: 150px;
      border: 1px solid #000;
      margin: 10px auto;
    }
    #color-preview-cmyk {
      width: 150px;
      height: 150px;
      border: 1px solid #000;
      margin: 10px auto;
    }
    #color-preview-hsl {
      width: 150px;
      height: 150px;
      border: 1px solid #000;
      margin: 10px auto;
    }
    
    #color-preview-rgb span {
      display: block;
      margin-top: 5px;
      font-size: 16px;
      font-weight: bold;
    }
    #color-preview-cmyk span {
      display: block;
      margin-top: 5px;
      font-size: 16px;
      font-weight: bold;
    } 
    #color-preview-hsl span {
      display: block;
      margin-top: 5px;
      font-size: 16px;
      font-weight: bold;
    }    
    
    .color-slider {
      width: 300px;
      margin: 10px auto;
    }
    .color-slider input[type="range"] { 
      width: 100%;
    }
    .color-slider input[type="text"] {
      width: 60px;
      margin-left: 10px;
    }
    .color-palette {
      width: 300px;
      margin: 10px auto;
      position: relative;
    }
    
    #color-area{
      display: flex;
      flex-direction: row;
    }
  </style>
</head>
<body>
<div id="color-area">
  
  <div id="color-picker-rgb">
    <div id="color-preview-rgb">
      <div id="color-preview-box-rgb"></div>
      <span>RGB: <span id="rgb"></span></span>
    </div>
    <div class="color-slider">
      <label>Red:</label>
      <input type="range" min="0" max="255" value="0" id="red-slider-rgb">
      <input type="text" id="red-value-rgb">
    </div>
    <div class="color-slider">
      <label>Green:</label>
      <input type="range" min="0" max="255" value="0" id="green-slider-rgb">
      <input type="text" id="green-value-rgb">
    </div>
    <div class="color-slider">
      <label>Blue:</label>
      <input type="range" min="0" max="255" value="0" id="blue-slider-rgb">
      <input type="text" id="blue-value-rgb">
    </div>
    <div class="color-palette">
      <input type="color" id="clr-rgb" class="form-control" name="color"/>
    </div>
    <div id="error-block-rgb">
      <span id="error-message-rgb"></span>
    </div>
  </div>
  
  <div id="color-picker-cmyk">
    <div id="color-preview-cmyk">
      <div id="color-preview-box-cmyk"></div>
      <span>CMYK: <span id="cmyk"></span></span>
    </div>
    <div class="color-slider">
      <label>Cyan:</label>
      <input type="range" min="0" max="100" value="0" id="cyan-slider">
      <input type="text" id="cyan-value">
    </div>
    <div class="color-slider">
      <label>Magenta:</label>
      <input type="range" min="0" max="100" value="0" id="magenta-slider">
      <input type="text" id="magenta-value">
    </div>
    <div class="color-slider">
      <label>Yellow:</label>
      <input type="range" min="0" max="100" value="0" id="yellow-slider">
      <input type="text" id="yellow-value">
    </div>
    <div class="color-slider">
      <label>Key (Black):</label>
      <input type="range" min="0" max="100" value="0" id="key-slider">
      <input type="text" id="key-value">
    </div>
    <div class="color-palette">
      <input type="color" id="clr-cmyk" class="form-control" name="color"/>
    </div>
    <div id="error-block-cmyk">
      <span id="error-message-cmyk"></span>
    </div>
  </div>

  <div id="color-picker-hsl">
    <div id="color-preview-hsl">
      <div id="color-preview-box-hsl"></div>
      <span>HSL: <span id="hsl"></span></span>
    </div>
    <div class="color-slider">
      <label>Hue:</label>
      <input type="range" min="0" max="360" value="0" id="hue-slider-hsl">
      <input type="text" id="hue-value-hsl">
    </div>
    <div class="color-slider">
      <label>Saturation:</label>
      <input type="range" min="0" max="100" value="0" id="saturation-slider-hsl">
      <input type="text" id="saturation-value-hsl">
    </div>
    <div class="color-slider">
      <label>Lightness:</label>
      <input type="range" min="0" max="100" value="0" id="lightness-slider-hsl">
      <input type="text" id="lightness-value-hsl">
    </div>
    <div class="color-palette">
      <input type="color" id="clr-hsl" class="form-control" name="color"/>
    </div>
    <div id="error-block-hsl">
      <span id="error-message-hsl"></span>
    </div>
  </div>

</div>
<script>    
    // Получаем элементы
    const colorPreviewBox = document.querySelector('#color-preview-box-rgb');
    const colorPreview = document.querySelector('#color-preview-rgb');
    const rgbValue = document.querySelector('#rgb');
    const redSlider = document.querySelector('#red-slider-rgb');
    const greenSlider = document.querySelector('#green-slider-rgb');
    const blueSlider = document.querySelector('#blue-slider-rgb');
    const redValue = document.querySelector('#red-value-rgb');
    const greenValue = document.querySelector('#green-value-rgb');
    const blueValue = document.querySelector('#blue-value-rgb');
    const colorCanvas = document.querySelector('#clr-rgb');
    const selectedColor = document.querySelector('.selected-color-rgb');
    
    const colorPreviewBoxCmyk = document.querySelector('#color-preview-box-cmyk');
    const colorPreviewCmyk = document.querySelector('#color-preview-cmyk');
    const cmykValue = document.querySelector('#cmyk');
    const cyanSlider = document.querySelector('#cyan-slider');
    const magentaSlider = document.querySelector('#magenta-slider');
    const yellowSlider = document.querySelector('#yellow-slider');
    const keySlider = document.querySelector('#key-slider');
    const cyanValue = document.querySelector('#cyan-value');
    const magentaValue = document.querySelector('#magenta-value');
    const yellowValue = document.querySelector('#yellow-value');
    const keyValue = document.querySelector('#key-value');
    const colorCanvasCmyk = document.querySelector('#clr-cmyk');
    const selectedColorCmyk = document.querySelector('.selected-color-cmyk');
    
    const colorPreviewBoxHsl = document.querySelector('#color-preview-box-hsl');
    const colorPreviewHsl = document.querySelector('#color-preview-hsl');
    const hslValue = document.querySelector('#hsl');
    const hueSlider = document.querySelector('#hue-slider-hsl');
    const saturationSlider = document.querySelector('#saturation-slider-hsl');
    const lightnessSlider = document.querySelector('#lightness-slider-hsl');
    const hueValue = document.querySelector('#hue-value-hsl');
    const saturationValue = document.querySelector('#saturation-value-hsl');
    const lightnessValue = document.querySelector('#lightness-value-hsl');
    const colorCanvasHsl = document.querySelector('#clr-hsl');
    const selectedColorHsl = document.querySelector('.selected-color-hsl');
    
    const errorMessageRgb = document.querySelector('#error-message-rgb');
    const errorMessageCmyk = document.querySelector('#error-message-cmyk');
    const errorMessageHsl = document.querySelector('#error-message-hsl');
    
    // Обновляем выбранный цвет при клике на цветовой палитре
    colorCanvas.addEventListener('change', (event) => {
      const data = colorCanvas.value.toUpperCase();
      const red = parseInt(data.substring(1, 3), 16);
      const green = parseInt(data.substring(3, 5), 16);
      const blue = parseInt(data.substring(5, 7), 16);
      const color = `rgb(${red}, ${green}, ${blue})`;
      redSlider.value = red;
      greenSlider.value = green;
      blueSlider.value = blue;
      redValue.value = red;
      greenValue.value = green;
      blueValue.value = blue;
      updateColorPreviewRgb();
      updateCmykConverter(redSlider.value, greenSlider.value, blueSlider.value);
      updateHslConverter(redSlider.value, greenSlider.value, blueSlider.value);
    });
    
    colorCanvasCmyk.addEventListener('change', (event) => {
      function hexToCmyk(hex) {
        // Parse the hex code into its RGB components
        var r = parseInt(hex.substring(1,3),16);
        var g = parseInt(hex.substring(3,5),16);
        var b = parseInt(hex.substring(5,7),16);
      
        // Convert the RGB components to CMY components
        var c = 1 - (r / 255);
        var m = 1 - (g / 255);
        var y = 1 - (b / 255);
      
        // Find the minimum of the CMY components
        var k = Math.min(c, m, y);
      
        // Convert the CMY components to CMYK components
        if (k == 1) {
          return [0, 0, 0, 1];
        } else {
          var cmyk = [
            (c - k) / (1 - k),
            (m - k) / (1 - k),
            (y - k) / (1 - k),
            k
          ];
          return cmyk;
        }
      }

      
      const data = colorCanvasCmyk.value.toUpperCase();
      var cmyk = hexToCmyk(data);
      
      cyanValue.value = Math.round(cmyk[0] * 100);
      cyanSlider.value = Math.round(cmyk[0] * 100);
      magentaValue.value = Math.round(cmyk[1] * 100);
      magentaSlider.value = Math.round(cmyk[1] * 100);
      yellowValue.value = Math.round(cmyk[2] * 100);
      yellowSlider.value = Math.round(cmyk[2] * 100);
      keyValue.value = Math.round(cmyk[3] * 100);
      keySlider.value = Math.round(cmyk[3] * 100);
      
      updateColorPreviewCmyk();
      
      var rgb = cmykToRgb(cyanSlider.value, magentaSlider.value, yellowSlider.value, keySlider.value);
      updateRgbConverter(rgb.r, rgb.g,  rgb.b);
      updateHslConverter(rgb.r,  rgb.g, rgb.b);
    });
    
    colorCanvasHsl.addEventListener('change', (event) => {

      function hexToHsl(hex) {
        // Convert hex to RGB first
        let r = parseInt(hex.substring(1,3), 16) / 255;
        let g = parseInt(hex.substring(3,5), 16) / 255;
        let b = parseInt(hex.substring(5,7), 16) / 255;
      
        // Find the maximum and minimum values of R, G, B
        let cmax = Math.max(r, g, b);
        let cmin = Math.min(r, g, b);
        let delta = cmax - cmin;
      
        // Calculate the hue (in degrees)
        let hue = 0;
        if (delta === 0) {
          hue = 0;
        } else if (cmax === r) {
          hue = ((g - b) / delta) % 6;
        } else if (cmax === g) {
          hue = (b - r) / delta + 2;
        } else {
          hue = (r - g) / delta + 4;
        }
        hue = Math.round(hue * 60);
        if (hue < 0) hue += 360;
      
        // Calculate the lightness
        let lightness = (cmax + cmin) / 2;
      
        // Calculate the saturation
        let saturation = 0;
        if (delta !== 0) {
          saturation = delta / (1 - Math.abs(2 * lightness - 1));
        }
      
        // Return the HSL values
        return {h: hue, s: Math.round(saturation * 100), l: Math.round(lightness * 100)};
      }

         
      const data = colorCanvasHsl.value.toUpperCase();
      var hsl = hexToHsl(data);
       
      
      hueValue.value = hsl.h;
      hueSlider.value = hsl.h;
      saturationValue.value = hsl.s;
      saturationSlider.value = hsl.s;
      lightnessSlider.value = hsl.l;
      lightnessValue.value = hsl.l;
      
      updateColorPreviewHsl();
      
      var rgb = hslToRgb(hueSlider.value, saturationSlider.value, lightnessSlider.value);
      updateRgbConverter(rgb.r, rgb.g, rgb.b);
      updateCmykConverter(rgb.r, rgb.g, rgb.b);
    });
  
    // Функция, которая обновляет цвет превью
    const updateColorPreviewRgb = () => {
      const red = redSlider.value;
      const green = greenSlider.value;
      const blue = blueSlider.value;

      const color = `RGB(${red}, ${green}, ${blue})`;
	    colorPreview.style.background = color;
	    rgbValue.textContent = color;
	  };
    
    const updateColorPreviewCmyk = () => {
      
      function cmykToRgb(c, m, y, k) {
        const r = 255 * (1 - c) * (1 - k);
        const g = 255 * (1 - m) * (1 - k);
        const b = 255 * (1 - y) * (1 - k);
      
        return { r: Math.round(r), g: Math.round(g), b: Math.round(b) };
      }
      
      const cyan = parseInt(cyanSlider.value) / 100;  
      const magenta = parseInt(magentaSlider.value) / 100;
      const yellow = parseInt(yellowSlider.value) / 100;
      const key = parseInt(keySlider.value) / 100;
      
      let rgb = cmykToRgb(cyan, magenta, yellow, key);

      const color = `CMYK(${Math.round(cyan*100)}, ${Math.round(magenta*100)}, ${Math.round(yellow*100)}, ${Math.round(key*100)})`;
      colorPreviewCmyk.style.background = `RGB(${rgb.r}, ${rgb.g}, ${rgb.b})`;
      cmykValue.textContent = color;
    };
    
    const updateColorPreviewHsl = () => {
      
      const hue = parseInt(hueSlider.value);
      const saturation = parseInt(saturationSlider.value);
      const lightness = parseInt(lightnessSlider.value);
      
      let rgb = hslToRgb(hue, saturation, lightness);
      
      const color = `HSL(${Math.round(hue)}, ${Math.round(saturation)}, ${Math.round(lightness)})`;
      colorPreviewHsl.style.background = `RGB(${rgb.r}, ${rgb.g}, ${rgb.b})`;
      hslValue.textContent = color;
    }
    
	  // Функция, которая обновляет значения текстовых полей при изменении слайдера
    const updateTextFieldsRgb = (slider, value) => {
      slider.addEventListener('input', () => {
        const red = parseInt(redSlider.value);
       const green = parseInt(greenSlider.value);
       const blue = parseInt(blueSlider.value);
       if (red > 255 || red < 0 || green > 255 || green < 0 || blue > 255 || blue < 0){
         errorMessageRgb.textContent += `Выход за границы, произошло округление.`;
       }
       else{
         errorMessageRgb.textContent = '';
       }
        
        value.value = slider.value;
        updateColorPreviewRgb();
        updateCmykConverter(redSlider.value, greenSlider.value, blueSlider.value);
        updateHslConverter(redSlider.value, greenSlider.value, blueSlider.value);
      });
    };
    
    const updateTextFieldsCmyk = (slider, value) => {
      slider.addEventListener('input', () => {
        const cyan = parseInt(cyanSlider.value);
         const magenta = parseInt(magentaSlider.value);
         const yellow = parseInt(yellowSlider.value);
         const key = parseInt(keySlider.value);
         if (cyan < 0 || cyan > 100 || magenta < 0 || magenta > 100 || yellow < 0 || yellow > 100 || key < 0 || key > 100){
           errorMessageCmyk.textContent = `Выход за границы, произошло округление.`;
         }
         else{
           errorMessageCmyk.textContent = '';
         }
        
        value.value = slider.value;
        updateColorPreviewCmyk();
        var rgb = cmykToRgb(cyanSlider.value, magentaSlider.value, yellowSlider.value, keySlider.value);
        updateRgbConverter(rgb.r, rgb.g,  rgb.b);
        updateHslConverter(rgb.r, rgb.g,  rgb.b);
      });
    };
    
    const updateTextFieldsHsl = (slider, value) => {
      slider.addEventListener('input', () => {
        const hue = parseInt(hueSlider.value);
        const saturation = parseInt(saturationSlider.value);
        const lightness = parseInt(lightnessSlider.value);
        if (hue < 0 || hue > 360 || saturation < 0 || saturation > 100 || lightness < 0 || lightness > 100){
          errorMessageHsl.textContent = `Выход за границы, произошло округление.`;
        }
        else{
          errorMessageHsl.textContent = '';
        }
        
        value.value = slider.value;
        updateColorPreviewHsl();
        var rgb = hslToRgb(hueSlider.value, saturationSlider.value, lightnessSlider.value);
        updateRgbConverter(rgb.r, rgb.g, rgb.b);
        updateCmykConverter(rgb.r, rgb.g, rgb.b);
      });
    };
    
    updateTextFieldsCmyk(cyanSlider, cyanValue);
    updateTextFieldsCmyk(magentaSlider, magentaValue);
    updateTextFieldsCmyk(yellowSlider, yellowValue);
    updateTextFieldsCmyk(keySlider, keyValue);

    updateTextFieldsRgb(redSlider, redValue);
    updateTextFieldsRgb(greenSlider, greenValue);
    updateTextFieldsRgb(blueSlider, blueValue);
    
    updateTextFieldsHsl(hueSlider, hueValue);
    updateTextFieldsHsl(saturationSlider, saturationValue);
    updateTextFieldsHsl(lightnessSlider, lightnessValue);
        
    const updateSlidersRgb = (slider, value) => {
      value.addEventListener('input', () =>{
         const red = parseInt(redValue.value);
         const green = parseInt(greenValue.value);
         const blue = parseInt(blueValue.value);
         if (red > 255 || red < 0 || green > 255 || green < 0 || blue > 255 || blue < 0){
           errorMessageRgb.textContent += `Выход за границы, произошло округление.`;
         }
         else{
           errorMessageRgb.textContent = '';
         }
               
         slider.value = value.value;
         updateColorPreviewRgb();
         updateCmykConverter(redSlider.value, greenSlider.value, blueSlider.value);
         updateHslConverter(redSlider.value, greenSlider.value, blueSlider.value);
      });
    };
    
    const updateSlidersCmyk = (slider, value) => {
      value.addEventListener('input', () =>{
         const cyan = parseInt(cyanValue.value);
         const magenta = parseInt(magentaValue.value);
         const yellow = parseInt(yellowValue.value);
         const key = parseInt(keyValue.value);
         if (cyan < 0 || cyan > 100 || magenta < 0 || magenta > 100 || yellow < 0 || yellow > 100 || key < 0 || key > 100){
           errorMessageCmyk.textContent = `Выход за границы, произошло округление.`;
         }
         else{
           errorMessageCmyk.textContent = '';
         }
        
         slider.value = value.value;
         updateColorPreviewCmyk();
         var rgb = cmykToRgb(cyanSlider.value, magentaSlider.value, yellowSlider.value, keySlider.value);
         updateRgbConverter(rgb.r, rgb.g,  rgb.b);
         updateHslConverter(rgb.r, rgb.g,  rgb.b);
      });
    };
    
    const updateSlidersHsl = (slider, value) => {
      value.addEventListener('input', () =>{
        const hue = parseInt(hueValue.value);
        const saturation = parseInt(saturationValue.value);
        const lightness = parseInt(lightnessValue.value);
        if (hue < 0 || hue > 360 || saturation < 0 || saturation > 100 || lightness < 0 || lightness > 100){
          errorMessageHsl.textContent = `Выход за границы, произошло округление.`;
        }
        else{
          errorMessageHsl.textContent = '';
        }
        
         slider.value = value.value;
         updateColorPreviewHsl();
         var rgb = hslToRgb(hueSlider.value, saturationSlider.value, lightnessSlider.value);
         updateRgbConverter(rgb.r, rgb.g, rgb.b);
         updateCmykConverter(rgb.r, rgb.g, rgb.b);
      });
    };
    
    updateSlidersCmyk(cyanSlider, cyanValue);
    updateSlidersCmyk(magentaSlider, magentaValue);
    updateSlidersCmyk(yellowSlider, yellowValue);
    updateSlidersCmyk(keySlider, keyValue);
    
    updateSlidersRgb(redSlider, redValue);
    updateSlidersRgb(greenSlider, greenValue);
    updateSlidersRgb(blueSlider, blueValue);
    
    updateSlidersHsl(hueSlider, hueValue);
    updateSlidersHsl(saturationSlider, saturationValue);
    updateSlidersHsl(lightnessSlider, lightnessValue);

    function updateCmykConverter(r, g, b){
      r = parseInt(r);
      g = parseInt(g);
      b = parseInt(b);
      
      function rgbToCmyk(r, g, b) {
        // normalize RGB values to range 0-1
        var red = r / 255;
        var green = g / 255;
        var blue = b / 255;
        
        // calculate the maximum value of R, G, B
        var max = Math.max(red, green, blue);
        
        // if max value is 0, return black
        if (max === 0) {
          return [0, 0, 0, 100];
        }
        
        // normalize CMY values to range 0-1
        var cyan = (max - red) / max;
        var magenta = (max - green) / max;
        var yellow = (max - blue) / max;
        
        // calculate key (black) value
        var key = 1 - max;
        
        // normalize CMYK values to range 0-100
        var cmyk = [
          Math.round(cyan * 100),
          Math.round(magenta * 100),
          Math.round(yellow * 100),
          Math.round(key * 100)
        ];
        
        return cmyk;
      }
      
      var cmyk = rgbToCmyk(r, g, b);
      
      cyanValue.value = cmyk[0];
      cyanSlider.value = cmyk[0];
      magentaValue.value = cmyk[1];
      magentaSlider.value = cmyk[1];
      yellowValue.value = cmyk[2];
      yellowSlider.value = cmyk[2];
      keyValue.value = cmyk[3];
      keySlider.value = cmyk[3];
      
      updateColorPreviewCmyk();
    }
    
    function updateRgbConverter(r, g, b){
      r = parseInt(r);
      g = parseInt(g);
      b = parseInt(b);
      
      redValue.value = r;
      redSlider.value = r;
      greenValue.value = g;
      greenSlider.value = g;
      blueValue.value = b;
      blueSlider.value = b;
      
      updateColorPreviewRgb();
    }
    
    function updateHslConverter(r, g, b){
      
      r = parseInt(r);
      g = parseInt(g);
      b = parseInt(b);
      
      var hsl = rgbToHsl(r, g, b);
      
      hueValue.value = Math.round(hsl[0]);
      hueSlider.value = hsl[0];
      saturationValue.value = Math.round(hsl[1]);
      saturationSlider.value = hsl[1];
      lightnessSlider.value = hsl[2];
      lightnessValue.value = Math.round(hsl[2]);
      
      updateColorPreviewHsl();
    }
    
    function cmykToRgb(c, m, y, k) {
      c = parseInt(c);
      m = parseInt(m);
      y = parseInt(y);
      k = parseInt(k);
      // Convert CMYK values to range 0-1
      c = c / 100;
      m = m / 100;
      y = y / 100;
      k = k / 100;
    
      // Convert CMYK to RGB
      var r = 255 * (1 - c) * (1 - k);
      var g = 255 * (1 - m) * (1 - k);
      var b = 255 * (1 - y) * (1 - k);
    
      // Round RGB values to integers
      r = Math.round(r);
      g = Math.round(g);
      b = Math.round(b);
    
      // Return RGB color as an object
      return { r: r, g: g, b: b };
    }
    
    const rgbToHsl = (r, g, b) => {
      r = parseInt(r);
      g = parseInt(g);
      b = parseInt(b);
      
      r /= 255;
      g /= 255;
      b /= 255;
      const l = Math.max(r, g, b);
      const s = l - Math.min(r, g, b);
      const h = s
        ? l === r
          ? (g - b) / s
          : l === g
          ? 2 + (b - r) / s
          : 4 + (r - g) / s
        : 0;
      return [
        60 * h < 0 ? 60 * h + 360 : 60 * h,
        100 * (s ? (l <= 0.5 ? s / (2 * l - s) : s / (2 - (2 * l - s))) : 0),
        (100 * (2 * l - s)) / 2,
      ];
    };
    
    const hslToRgb = (h, s, l) => {
      h = parseInt(h);
      s = parseInt(s);
      l = parseInt(l);
      
      s /= 100;
      l /= 100;
      const k = n => (n + h / 30) % 12;
      const a = s * Math.min(l, 1 - l);
      const f = n =>
        l - a * Math.max(-1, Math.min(k(n) - 3, Math.min(9 - k(n), 1)));
      return {r: 255 * f(0), 
      g: 255 * f(8), 
      b: 255 * f(4)};
    };

  </script>
</body>
</html>

